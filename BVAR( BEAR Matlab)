% === VERSIÓN DESARROLLADOR MATLAB BEAR  =========================
% Ruta a la carpeta donde está instalado la ToolBox BEAR
BEAR_DIR = 'C:\ruta\a\BEARv5';         % <-- CAMBIE A SU DIRECCIÓN

% Carpeta del proyecto BVAR
PROJ_DIR = 'C:\ruta\a\mi_proyecto_bvar';  % <-- CAMBIE A SU DIRECCIÓN

% Archivo de datos y variables endógenas (en el orden de Cholesky)
DATA_FILE = fullfile(PROJ_DIR,'DATOS-TESIS.xlsx');  % <-- CAMBIE A SU ARCHIVO
DATA_VAR  = {'pi','yhat','d_er','i'};               % <-- PONGA EL NOMBRE DE SUS VARIABLES

% Fechas y frecuencia
STARTDATE = '2019m1';
ENDDATE   = '2023m12';
FREQ      = 2;     % 1=trimestral, 2=mensual, 3=diaria, etc. 

% Especificación BVAR( A SU CRITERIO)
LAGS   = 4;        % número de rezagos
IRFt   = 2;        % 2 = Cholesky
PRIOR  = 2;        % 2 = Normal-Wishart (BEAR)
AR     = 0.8;      % hiperparámetro ar
L1     = 0.1;      % lambda1
L3     = 1;        % lambda3

% CARPETA DONDE ESTARÁN ALOJADOS SUS RESULTADOS
RESULTS_DIR = fullfile(PROJ_DIR,'results_dev');
if ~exist(RESULTS_DIR,'dir'); mkdir(RESULTS_DIR); end


% BEAR - Developer Mode runner (sin GUI) (ESTO YA ES A ELECCIÓN DE CADA PERSONA SI USAR VERSIÓN DE DESARROLLADOR O USAR INTERFAZ DE DEFAULT
clear; clc;

% Carge su configuración editable
bvar_dev_overrides;

% Añada BEAR al path y vea a su proyecto
addpath(genpath(BEAR_DIR));
cd(PROJ_DIR);

% -------------------------------------------------------------------------
% 1) Carge una base de 'pref.mat' y sobreescriba campos
%    (Use la pref de una corrida previa de la GUI o una plantilla suya)
%    Si ya corrio GUI alguna vez en esta carpeta, habrá un pref.mat.
% -------------------------------------------------------------------------
if isfile(fullfile(PROJ_DIR,'pref.mat'))
    S = load(fullfile(PROJ_DIR,'pref.mat'));   % debe traer struct 'pref'
    pref = S.pref;
else
    % Si no tiene pref.mat aún, cree una estructura básica vacía.
    % (BEAR llenará por defecto campos faltantes; mantener nombres estándar)
    pref = struct();
end

% -------------------------------------------------------------------------
% 2) Sobrescribir parámetros clave del BVAR (solo si el campo existe o crearlo)
%    Nota: algunos nombres/flags pueden variar entre versiones;
%    por eso usamos 'isfield' y, si no existen, los creamos.
% -------------------------------------------------------------------------
pref.results_path      = RESULTS_DIR;

pref.data_endo         = DATA_FILE;
pref.data_endo_var     = DATA_VAR;
pref.startdate         = STARTDATE;
pref.enddate           = ENDDATE;
pref.freq              = FREQ;

pref.lags              = LAGS;      % número de rezagos
pref.IRFt              = IRFt;      % identificación
pref.prior             = PRIOR;     % 2 = Normal-Wishart
pref.ar                = AR;
pref.lambda1           = L1;
pref.lambda3           = L3;

% (Campos comunes de conveniencia; BEAR ignora los que no necesita)
pref.const             = 1;         % incluir constante
pref.const_exo         = 0;         % exógenas (aquí no usamos)
pref.data_exo          = '';
pref.data_exo_var      = {};
pref.cband             = 0.68;      % banda por defecto para IRFs/tablas

% -------------------------------------------------------------------------
% 3) Correr BEAR sin abrir la GUI
%    IMPORTANTE: evite llamar a una variable 'results' (choca con toolboxes)
% -------------------------------------------------------------------------
disp('>> Corriendo BEAR (modo desarrollador, sin GUI)…');
bear5(pref);               % No asignamos salida para evitar conflictos

% Al terminar, BEAR deja variables en el workspace y archivos en RESULTS_DIR
disp('>> Terminó. Revise variables en el Workspace y la carpeta de resultados.');

% -------------------------------------------------------------------------
% 4) Ejemplos de post-proceso (si las variables existen)
% -------------------------------------------------------------------------
% IRFs (algunas versiones exportan IRFs a variables tipo IRF_record)
if evalin('base','exist(''IRF_record'',''var'')')
    IRF_record = evalin('base','IRF_record');  %#ok<NASGU>
    save(fullfile(RESULTS_DIR,'IRF_record.mat'),'IRF_record');
end

% Coeficientes muestreados (beta_gibbs) si existe:
if evalin('base','exist(''beta_gibbs'',''var'')')
    beta_gibbs = evalin('base','beta_gibbs');  %#ok<NASGU>
    save(fullfile(RESULTS_DIR,'beta_gibbs.mat'),'beta_gibbs');
end

% Matrices estructurales D_record (si existe):
if evalin('base','exist(''D_record'',''var'')')
    D_record = evalin('base','D_record');      %#ok<NASGU>
    save(fullfile(RESULTS_DIR,'D_record.mat'),'D_record');
end

disp('>> Post-proceso mínimo guardado en IRF_record.mat / beta_gibbs.mat / D_record.mat (si existían).');


